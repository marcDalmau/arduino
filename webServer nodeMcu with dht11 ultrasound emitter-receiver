#define DHTPIN 9 // S02
#define DHTTYPE DHT11
#define output4 4 //D2 // Assign output variables to GPIO pins
#define output5 5 //D1
DHT dht(DHTPIN, DHTTYPE);

const char* ssid = "-----";       //network credentials
const char* password = "-----";

const int EchoPin = 12; //D6
const int TriggerPin = 14; //D5
String header;                  // Variable to store the HTTP request
String distancia;               // Variable to store the distance checked by the ultrasound (in cm)
String output5State = "off";    // Auxiliar variables to store the current output state
String output4State = "off";
int checknivel, tempHrequest;
String humidity;
String temperature;
WiFiServer server(80);          // Set web server port number to 80

unsigned long currentTime = millis(); // Current time
unsigned long previousTime = 0;       // Previous time
const long timeoutTime = 2000;        // Define timeout time in milliseconds (example: 2000ms = 2s)
WiFiClient client;

void setup()
{
    Serial.begin(115200);
    // Initialize the output variables as outputs
    pinMode(output4, OUTPUT);
    pinMode(output5, OUTPUT);
    // Set outputs to LOW
    digitalWrite(output5, LOW);
    digitalWrite(output4, LOW);
    // Set status of sensor pins
    pinMode(TriggerPin, OUTPUT);
    pinMode(EchoPin, INPUT);
    pinMode(DHTPIN, INPUT);
    delay(100); 
    
    // Connect to Wi-Fi network with SSID and password
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(100);
      Serial.print(".");
    }
    // Print local IP address and start web server
    Serial.println("");
    Serial.println("WiFi connected.");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    server.begin();
    checknivel=0;
    tempHrequest = 0;
}


void loop()
{
  client = server.available();   // Listen for incoming clients
  if (client)
  {                                         // If a new client connects,
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    currentTime = millis();
    previousTime = currentTime;
    while (client.connected() && currentTime - previousTime <= timeoutTime) { // loop while the client's connected
      currentTime = millis();         
      if (client.available()) 
      {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n')
        {                                   // if the byte is a newline character
                                            // if the current line is blank, you got two newline characters in a row.
                                            // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0)
          {
                                            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
                                            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
            entradesLed();
            checkNivell();
            //checkHumidity();
            checkHumidityTemperature();
            displayHTML();
                       
            //Start of form method
            client.println("<form method='get'>");
            processFORM();
            client.println("</form>");
             
            client.println("</body></html>");
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          }
          else
          {                                 // if you got a newline, then clear currentLine
            currentLine = "";
          }
        }
        else if (c != '\r')
        {                                   // if you got anything else but a carriage return character,
          currentLine += c;                 // add it to the end of the currentLine
        }
      }
    }
                                            // Clear the header variable
    header = "";
                                            // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}


void entradesLed()
{
                                                                                    // turns GPIOs ON and OFF
    if (header.indexOf("GET /5on") >= 0) {
      output5State = "on";
      digitalWrite(output5, HIGH);
    } else if (header.indexOf("GET /5off") >= 0) {
      output5State = "off";
      digitalWrite(output5, LOW);
    } else if (header.indexOf("GET /4on") >= 0) {
      output4State = "on";
      digitalWrite(output4, HIGH);
    } else if (header.indexOf("GET /4off") >= 0) {
      output4State = "off";
      digitalWrite(output4, LOW);
    } 
}


void checkNivell()
{
                                                                                  //if CHECK NIVELL button is activated...
    if (header.indexOf("GET /nivellOn") >= 0)
    {
        checknivel = 1;
    }   
    else if (header.indexOf("GET /nivellOff") >= 0)
    {
        checknivel = 0;  
    }
}


int checkHumidityTemperature()
{                                                                               //if CHECK NIVELL button is activated...
    if (header.indexOf("GET /humid1") >= 0)
    {
        tempHrequest = 1;
    }   
    else if (header.indexOf("GET /humid0") >= 0)
    {
        tempHrequest = 0; 
    }
    return tempHrequest;
}

void processFORM()
{    
     if (header.indexOf("favicon") > -1) 
     {
             client.println("<select name='arduino'>");
             client.println("<option value='A1'>ARDUINO1</option>");
             client.println("<option value='A2'>ARDUINO2</option>");
             client.println("</select>");  
             client.println("<button type=submit>EXECUTA");
     } 
     else if (header.indexOf("arduino=A1") > -1) 
     {
             client.println("<select name='arduino'>");
             client.println("<option value='A2'>ARDUINO1</option>");
             client.println("<option value='A1'>ARDUINO2</option>");
             client.println("</select>");  
             client.println("<button type=submit>EXECUTA");
     } 
     else if (header.indexOf("arduino=A2") > -1) 
     {
             client.println("<select name='arduino'>");
             client.println("<option value='A1'>ARDUINO2</option>");
             client.println("<option value='A2'>ARDUINO1</option>");
             client.println("</select>"); 
             client.println("<button type=submit>EXECUTA");
     }
     else
     {
             client.println("<select name='arduino'>");
             client.println("<option value='A1'>ARDUINO1</option>");
             client.println("<option value='A2'>ARDUINO2</option>");
             client.println("</select>");  
             client.println("<button type=submit>EXECUTA");
     }
}


int processDistancia(int TriggerPin, int EchoPin)
{
  long duration, distanceCm;
  digitalWrite(TriggerPin, LOW);  //para generar un pulso limpio ponemos a LOW 4us
  delayMicroseconds(4);
  digitalWrite(TriggerPin, HIGH);  //generamos Trigger (disparo) de 10us
  delayMicroseconds(10);
  digitalWrite(TriggerPin, LOW);
  
  duration = pulseIn(EchoPin, HIGH);  //medimos el tiempo entre pulsos, en microsegundos
  
  distanceCm = duration * 10 / 292/ 2;   //convertimos a distancia, en cm
    Serial.println(distanceCm);
  return distanceCm;
}


void processHumidityTemp()
{
// Leemos la humedad relativa
float h = dht.readHumidity();
// Leemos la temperatura en grados centígrados (por defecto)
float t = dht.readTemperature();
// Comprobamos si ha habido algún error en la lectura
if (isnan(h) || isnan(t))
{
  Serial.println("Error obteniendo los datos del sensor DHT11");
  return;
}
humidity = h;
temperature = t;
Serial.println("la temperatura es:");
Serial.println(temperature);
delay(1000);
}


void displayHTML()
{
                                                                                    // Display the HTML WEB PAGE
    client.println("<!DOCTYPE html><html>");
    client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
    client.println("<link rel=\"icon\" href=\"data:,\">");
    
                                                                            // CSS to style the on/off buttons 
    client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
    client.println(".button { background-color: #195B6A; border: none; color: white; padding: 16px 40px;");
    client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
    client.println(".button2 {background-color: #77878A;}</style></head>");       
    
                                                                            // Web Page Heading
    client.println("<body><h1>Arduino central</h1>"); 
         
    if (output5State=="off")                                                 // If the output5State is off, it displays the ON button  
    {
        client.println("<p><a href='5on'><button class='button'>ON</button></a></p>");
        client.println("<p>LED 5 esta OFF</p>");
    }
    else
    {
        client.println("<p><a href='5off'><button class='button button2'>OFF</button></a></p>");
        client.println("<p>LED 5 esta ON</p>");
    }  

    if (output4State=="off")                                                  // If the output4State is off, it displays the ON button 
    {
        client.println("<p><a href='4on'><button class='button'>ON</button></a></p>");
        client.println("<p>LED 4 esta OFF</p>");
    }
    else
    {
        client.println("<p><a href='4off'><button class='button button2'>OFF</button></a></p>");
        client.println("<p>LED 4 esta ON</p>");
    }

    if (checknivel==1)                                                       // Display NIVELL, If the checkNivell is on, it displays the OFF button
    {
        client.println("<p><a href='nivellOff'><button class='button button2'>OFF</button></a></p>");
        client.println("<p>Check nivell esta ON</p>");
        int cm = processDistancia(TriggerPin, EchoPin);
        distancia = cm;
        client.println("<p>Nivell(cm)="+distancia+"</p>");
    }
    else
    {
        client.println("<p><a href='nivellOn'><button class='button'>ON</button></a></p>");
        client.println("<p>Check nivell esta OFF</p>");
    } 
    
    if (tempHrequest==1)                                                       // Display temp and humidity
    {
        processHumidityTemp();
        client.println("<p><a href='humid0'><button class='button button2'>Close humidity and temperature</button></a></p>");
        client.println("<p>Humitat:"+humidity+"</p>");
        client.println("<p>Temperatura:"+temperature+"</p>");
    }
    else
    {
        client.println("<p><a href='humid1'><button class='button'>Check humidity and temperature</button></a></p>");
    } 
    
}
